name: OpenEuler RPM Package Downloader (Dual Mode)

on:
  workflow_dispatch:
    inputs:
      packages:
        description: '需要下载的软件包（空格分隔，例如：screen tmux htop）'
        required: true
        default: 'screen tmux htop'
        type: string
      # 新增模式选择参数，默认同时生成两种方式
      mode:
        description: '生成方式（all=同时生成两种模式，repo=仅本地仓库模式，packages=仅纯包模式）'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - repo
          - packages

jobs:
  download-and-package:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: 启动openEuler容器
        run: |
          docker run --rm --name openeuler-pkg -d \
            --platform linux/arm64 \
            --init \
            openeuler/openeuler:22.03 \
            /bin/sh -c "while true; do sleep 3600; done"
          
          # 等待容器启动
          for i in {1..10}; do
            if docker inspect -f '{{.State.Running}}' openeuler-pkg &> /dev/null; then
              echo "容器已运行"
              break
            fi
            sleep 3
          done
          pwd

      - name: 查询容器系统基本信息
        run: |
          echo "===== 查看内核信息 ====="
          docker exec openeuler-pkg uname -ar
          
          echo -e "\n===== 查看操作系统版本 ====="
          docker exec openeuler-pkg cat /etc/os-release
          
          echo -e "\n===== 查看原始yum仓库配置 ====="
          docker exec openeuler-pkg cat /etc/yum.repos.d/openEuler.repo
          
          echo -e "\n===== 查看磁盘空间 ====="
          docker exec openeuler-pkg df -h
          
          echo -e "\n===== 查看已启用的仓库 ====="
          docker exec openeuler-pkg dnf repolist enabled

          echo -e "\n===== 查看容器信息 ====="
          docker inspect openeuler-pkg
          pwd

      - name: 初始化环境与仓库
        run: |
          docker exec openeuler-pkg bash -c "
            # 替换国内源
            sed -i 's|repo.openeuler.org|mirrors.huaweicloud.com/openeuler|g' /etc/yum.repos.d/openEuler.repo
            dnf clean all && dnf makecache
            # 安装必要工具
            dnf install -y dnf-utils createrepo_c
            # 创建工作目录
            mkdir -p /workspace/{repo-mode,packages-mode}
          "
          pwd

      - name: 下载软件包（两种模式共用）
        run: |
          docker exec openeuler-pkg bash -c "
            PACKAGES=(${INPUT_PACKAGES})
            # 下载包到共享目录
            dnf download --resolve --destdir=/workspace/shared-rpms \"\${PACKAGES[@]}\"
            # 复制到两种模式的目录
            cp /workspace/shared-rpms/* /workspace/repo-mode/
            cp /workspace/shared-rpms/* /workspace/packages-mode/
          "
          pwd
        env:
          INPUT_PACKAGES: ${{ github.event.inputs.packages }}

      - name: 生成模式（带本地仓库）
        if: github.event.inputs.mode == 'all' || github.event.inputs.mode == 'repo'
        run: |
          docker exec openeuler-pkg bash -c "
            # 生成本地仓库元数据
            createrepo_c /workspace/repo-mode
          "
          pwd

      - name: 生成使用说明文档
        run: |
          # 创建说明文档
          cat > usage.md << EOF
          # OpenEuler离线安装指南

          本压缩包包含两种使用模式，请根据需求选择：

          ## 模式1：本地仓库模式（推荐，自动解决依赖）
          包含所有软件包及仓库元数据，支持dnf直接安装：
          1. 解压：tar -xzf openeuler-repo-mode.tar.gz -C /opt/local-repo
          2. 配置仓库：
             cat > /etc/yum.repos.d/local.repo << 'EOF'
             [local-repo]
             name=Local Repository
             baseurl=file:///opt/local-repo/repo-mode
             enabled=1
             gpgcheck=0
             EOF
          3. 安装：dnf clean all && dnf install -y ${INPUT_PACKAGES}

          ## 模式2：纯软件包模式（手动安装依赖）
          仅包含软件包，需手动解决依赖顺序：
          1. 解压：tar -xzf openeuler-packages-mode.tar.gz -C /opt/packages
          2. 安装（需按依赖顺序，示例）：
             cd /opt/packages/packages-mode
             rpm -ivh xxx.rpm  # 先安装底层依赖
             rpm -ivh ${INPUT_PACKAGES// /-*.rpm }  # 最后安装目标软件
          EOF
          pwd
        env:
          INPUT_PACKAGES: ${{ github.event.inputs.packages }}

      - name: 打包两种模式文件
        run: |
          # 从容器复制文件到宿主
          docker cp openeuler-pkg:/workspace ./

          # 关键修复：将 usage.md 复制到 workspace 目录下，确保 tar 能找到
          cp usage.md ./workspace/
          
          # 打包模式1（带仓库）
          if [[ "${{ github.event.inputs.mode }}" == "all" || "${{ github.event.inputs.mode }}" == "repo" ]]; then
            tar -czf openeuler-repo-mode.tar.gz -C ./workspace repo-mode usage.md
          fi
          
          # 打包模式2（纯包）
          if [[ "${{ github.event.inputs.mode }}" == "all" || "${{ github.event.inputs.mode }}" == "packages" ]]; then
            tar -czf openeuler-packages-mode.tar.gz -C ./workspace packages-mode usage.md
          fi
          
          docker stop openeuler-pkg
          pwd
          ls -alh
          cd ./
          pwd
          ls -alh

      - name: 上传模式1产物（带仓库）
        if: github.event.inputs.mode == 'all' || github.event.inputs.mode == 'repo'
        uses: actions/upload-artifact@v4
        with:
          name: openeuler-repo-mode
          path: openeuler-repo-mode.tar.gz
          retention-days: 3

      - name: 上传模式2产物（纯包）
        if: github.event.inputs.mode == 'all' || github.event.inputs.mode == 'packages'
        uses: actions/upload-artifact@v4
        with:
          name: openeuler-packages-mode
          path: openeuler-packages-mode.tar.gz
          retention-days: 3
